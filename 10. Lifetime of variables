int exp = 1;
for (int i = 0; i < number.Length - 1; i++) exp *= nbase;

1. Вынести в отдельный метод

char[] reverse = new char[res.Length];
 for (int i = 0; i < res.Length; i++) reverse[res.Length - 1 - i] = res[i];

2. Вынести в отдельный метод

while (b % a != 0) a = b - a * (b / a);

3. Вынести в отдельный метод

char op = ' ';
for (int i = 0; i < s.Length; i++)
     if (s[i] == '+' || s[i] == '-' || s[i] == ':' || s[i] == '*') op = s[i];
     
4. Вынести в отдельный метод

richTextBox1.ResetText();
richTextBox1.AppendText("Вероятность выпадения:");
richTextBox1.AppendText("\n1 - " + (double)rolled[0] / n);
richTextBox1.AppendText("\n2 - " + (double)rolled[1] / n);
...

5. Вынести в отдельный метод

for (double i = 1.0; i <= 30.0; i += 0.5)
                this.chart1.Series["ФИЗ"].Points.AddXY(i, Math.Sin(2.0 * Math.PI * (i + daysall) / 23));
                ...
6. Вынести в отдельный метод

for (double i = 0.0; i < t0; i += 0.1)
                this.chart1.Series["main"].Points.AddXY(i, Math.Sin(2.0 * Math.PI * i));
                ...
                
7. Вынести в отдельный метод                

 if (array != null) {
                    T[] temp = new T[count];
                    Array.Copy(array, temp, count);
                    array = new T[new_capacity];
                    Array.Copy(temp, array, count);
                    
8. Вынести в отдельный метод                     

for (int i = count; i > index; i--)
                    array[i] = array[i - 1];

9. Вынести в отдельный метод  

 for (int i = index; i < count - 1; i++)
                    array[i] = array[i + 1];
                    
10. Вынести в отдельный метод 

https://github.com/deadmadara/PathfinderSaver-v0.1/blob/master/PathfinderS/Player.cs
11. О проблеме public для сериализации писала в личном блоге. В идеале использовать либо другую систему привязки данных, например, через БД, либо сделать свой сериализатор.

https://github.com/deadmadara/PathfinderSaver-v0.1/blob/master/PathfinderS/MainForm.cs
12. Метод FillFormFromObject() изначально хранил все операции по наполнению формы, разбито на н блоков.
13. Метод ReadFormMainInfo() изначально хранил все операции по выгрузке данных из формы, разбито на н блоков.

https://github.com/deadmadara/PathfinderSaver-v0.1/blob/master/PathfinderS/Player.cs
14. Передача значений разбита на тематические методы

15. По большинству классов с первых курсов по алгоритмам можно спокойно сделать поля классов private, в случае неоходимости сделать метод GetValue() { return Value; }

